generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("NEXT_PUBLIC_MONGOOSE_URL")
}

model users {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    email      String    @unique
    password   String
    isAdmin    Boolean   @default(false)
    isBanned   Boolean   @default(false)
    isVerified Boolean   @default(false)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    reviews    reviews[]
}

model products {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    title         String         @unique
    newPrice      Float
    oldPrice      Float?
    slug          String         @unique
    categoryId    String         @db.ObjectId
    category      categories     @relation(fields: [categoryId], references: [id])
    subCategoryId String?        @db.ObjectId
    subCategory   subCategories? @relation(fields: [subCategoryId], references: [id])
    description   String
    quantity      Int
    shipping      Float
    image         String
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    colorIds      String[]       @db.ObjectId
    colors        colors[]       @relation(fields: [colorIds], references: [id])
    sizeIds       String[]       @db.ObjectId
    sizes         sizes[]        @relation(fields: [sizeIds], references: [id])
    gallery       String[]
    reviews       reviews[]
    brand         brands[]
}

model categories {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    name          String          @unique
    slug          String          @unique
    image         String
    products      products[]
    subCategories subCategories[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
}

model subCategories {
    id               String     @id @default(auto()) @map("_id") @db.ObjectId
    parentCategoryId String     @db.ObjectId
    parentCategory   categories @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    name             String     @unique
    slug             String     @unique
    image            String
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    products         products[]
}

model colors {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    code       String     @unique
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    productIds String[]   @db.ObjectId // Array of product IDs
    products   products[] @relation(fields: [productIds], references: [id])
}

model sizes {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    name       String     @unique
    slug       String     @unique
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    productIds String[]   @db.ObjectId // Array of product IDs
    products   products[] @relation(fields: [productIds], references: [id])
}

model reviews {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    comment   String
    rating    Float
    productId String   @db.ObjectId
    product   products @relation(fields: [productId], references: [id])
    userId    String   @db.ObjectId
    user      users    @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model brands {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    name      String    @unique
    slug      String    @unique
    logo      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    productId String?   @db.ObjectId
    products  products? @relation(fields: [productId], references: [id])
}
